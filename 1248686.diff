--- //product/BCC/main/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/AssetEditor.js
+++ /Users/buddha/work/oracle/jbuddha-ocp-main/BCC/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/AssetEditor.js
@@ -7,25 +7,25 @@
   var AssetEditorModel         = require("atg/assetmanager/editor/model/AssetEditorModel");
   var AssetViewNavigator       = require("atg/assetmanager/editor/view/AssetViewNavigator");
   var EditorConstants          = require("atg/assetmanager/editor/EditorConstants");
   var EditorEvents             = require("atg/assetmanager/editor/view/EditorEvents");
   var EditorController         = require("atg/assetmanager/editor/control/EditorController");
   var Notifications            = require("atg/core/Notifications");
   var Message                  = require("atg/assetmanager/common/model/Message");
   var sGlobalSwitchboard       = require("atg/controlcenter/event/GlobalSwitchboard");
   var sTemplateEngine          = require("atg/core/TemplateEngine");
   var sUtils                   = require("atg/core/Utils");
-  
+
   var ko = require("knockout");
 
   var ASSET_EDITOR_TEMPLATE = require("template!atg/assetmanager/editor/view/AssetEditor.html");
-   
+
   /**
    * @alias AssetEditor
    * @classdesc The main view model class for the Asset Editor.
    * @author Siva Sai Tedlapu
    * @version $Id: //product/BCC/main/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/AssetEditor.js#9 $$Change: 1247247 $
    * @constructor
    */
   var AssetEditor = function() {
 
     /**
@@ -51,20 +51,26 @@
      */
     this.assetType = null;
 
     /**
      * Indicates assetURI
      * @type {Observable<String>}
      */
     this.assetURI = ko.observable();
 
     /**
+     * Object to store and pass info regarding asset
+     * @type {Object}
+     */
+    this.assetInfo = {};
+
+    /**
      * Determines if the asset needs to be loaded
      * @type {boolean}
      */
     this.displayAsset = ko.observable(false);
 
     /**
      * URL of the image for the asset
      * @type {Observable<String>}
      */
     this.smallImageURL = ko.observable();
@@ -96,70 +102,73 @@
      * Width of the Right Hand Pane
      * @type {Observable<String>}
      */
     this.width = ko.observable();
 
     /**
      * Indicates initialization object
      * @type {Observable<String>}
      */
     this.initializationObject = ko.observable();
-    
+
     /**
      * Indicates whether assetEditor is modified or  not
      */
     this.modified = false;
   };
 
   /**
    * The template for the asset editor.
    * @type {string}
    */
   AssetEditor.prototype.template = sTemplateEngine.addSource(ASSET_EDITOR_TEMPLATE);
-  
+
   /**
    * Initialize the asset editor
    * @param pLocalSwitchboard, pInitializationObject
    */
   AssetEditor.prototype.init = function (pLocalSwitchboard, pInitializationObject) {
     this.localSwitchboard = pLocalSwitchboard;
     this.initializationObject(pInitializationObject);
     this.UID = pInitializationObject.applicationId + EditorConstants.ASSET_EDITOR_UID_SUFFIX;
     this.localSwitchboard.on(EditorEvents.GET_ASSET, this.getAssetInfo, this);
     this.localSwitchboard.on(EditorEvents.UPDATE_ASSET, this.UpdateAsset, this);
   };
 
   /**
-   * Called whenever a new asset editor state is returned from the server for 
+   * Called whenever a new asset editor state is returned from the server for
    * loading or reloading an asset.
    * @param pAssetEditorState asset editor return state object
    */
   AssetEditor.prototype.assetLoaded = function(pAssetEditorModel) {
     var assetHeader = new AssetEditorHeader();
     var assetNavigator = new AssetViewNavigator();
 
     this.modified = false;
+    this.assetInfo.uid = this.UID,
+    this.assetInfo.assetId = pAssetEditorModel.assetEditorState().asset.id
+
     // initialize asset view navigator
-    assetNavigator.init(this.UID, pAssetEditorModel.assetEditorState());
+    assetNavigator.init(this.assetInfo, pAssetEditorModel.assetEditorState());
     assetNavigator.on(EditorEvents.ENABLE_BUTTON, this.onPropertyChange, this);
     this.assetViewNavigator(assetNavigator);
-    
-    // initialize the asset header info 
+
+    // initialize the asset header info
     assetHeader.createAssetHeader(pAssetEditorModel.assetEditorState().asset);
     assetHeader.setPreviewButton(this.initializationObject(), false, pAssetEditorModel.assetEditorState().asset.previewable);
     this.assetEditorHeader(assetHeader);
-    
+
     var assetButtonBar = this.createButtonBar(pAssetEditorModel.assetEditorState(), this.initializationObject());
     this.assetEditorButtonBar(assetButtonBar);
     this.displayAsset(true);
   };
-  
+
   /**
    * Creates the asset editor button bar based on asset editor state
    * @param pAssetEditorState asset editor return state object
    * @param pInitializationObject
    */
   AssetEditor.prototype.createButtonBar = function (pAssetEditorState, pInitializationObject) {
     var assetButtonBar = new AssetEditorButtonBar(this.localSwitchboard);
     var state = pAssetEditorState;
     if (state.asset !== null) {
       //TO DO - dialog attribute is set to false, need to implement the logic when working on pop ups.
@@ -175,41 +184,41 @@
       assetButtonBar.reviewChangesDisabled(!reviewChangesEnabled);
       if (assetIsInConflict) {
         //modifying review changes button to resolve conflict when asset is in conflict state
         assetButtonBar.modifyReviewChangesLabels("assetManager_asset_editor_resolveConflict");
       }
     } else {
       assetButtonBar.reviewChangesDisabled(true);
     }
     return assetButtonBar;
   };
-  
+
   /**
-   * Event is triggered when any of the asset view panel is modified 
+   * Event is triggered when any of the asset view panel is modified
    * and corresponding buttons are enabled
    */
   AssetEditor.prototype.onPropertyChange = function () {
     this.modified = true;
     this.assetEditorButtonBar().saveButtonDisable(false);
     this.assetEditorButtonBar().cancelButtonDisable(false);
   };
 
   /**
-   * Invokes a REST call with the latest updates 
+   * Invokes a REST call with the latest updates
    */
   AssetEditor.prototype.UpdateAsset = function() {
     //check if there any errors displayed
     var hasError = this.assetViewNavigator().displayErrors();
      if(hasError)
        return false;
-     
-   //get all the updates and invoke a rest call 
+
+    //get all the updates and invoke a rest call
     var updates = this.assetViewNavigator().getUpdate();
     var jsonData = sUtils.getJsonData("java.util.ArrayList", ko.toJS(updates));
     sGlobalSwitchboard.trigger(EditorController.EVENT_UPDATE_ASSET, this.UID, jsonData, this.assetEditorModel, this.onUpdateAsset.bind(this));
     return true;
   }
 
   /**
    * Called whenever an asset is saved
    */
   AssetEditor.prototype.onUpdateAsset = function(pAssetEditorModel) {
@@ -222,48 +231,48 @@
       if (refreshInfo) {
         if (refreshInfo.needFullRefresh) {
           // Send full refresh event to browsePanel
         } else if (refreshInfo.assetChangeDetailsMap) {
           // Send properties changed event.
         }
         // Clear asset change details in model.
         refreshInfo.assetChangeDetailsMap = null;
       }
     }
-    
+
     if(pAssetEditorModel.errorState()) {
       if (pAssetEditorModel.errorState().specificMessages != null) {
         var errorDisplayedInView = this.assetViewNavigator().displayErrors(pAssetEditorModel.errorState());
         return;
       }
       if(!errorDisplayedInView || pAssetEditorModel.errorState().generalMessages != null){
         Notifications.showDialog(pAssetEditorModel.errorState().generalMessages);
       }
       return;
     }
-    
+
     if(pAssetEditorModel.successState().generalMessages != null){
       this.showMessages(Message.SUCCESS, pAssetEditorModel.successState().generalMessages)
     }
-     
+
     if(pAssetEditorModel.warningState().generalMessages != null){
       this.showMessages(Message.WARNING, pAssetEditorModel.warningState().generalMessages);
     }
-      
+
     if(pAssetEditorModel.informationState().generalMessages != null){
       this.showMessages(Message.INFORMATION, pAssetEditorModel.informationState().generalMessages);
     }
-    
+
     //Reload the asset with the latest data
     this.assetLoaded(pAssetEditorModel);
   }
-  
+
   /**
    * Trigger the event when asset is clicked in LHP
    * @param assetURI
    */
   AssetEditor.prototype.getAssetInfo = function (pAssetURI) {
     this.assetURI(pAssetURI);
     sGlobalSwitchboard.trigger(EditorController.EVENT_GET_ASSET, this.UID, this.assetURI(), this.assetEditorModel, this.assetLoaded.bind(this));
   };
 
   /**
@@ -272,14 +281,14 @@
    * @param pType
    */
   AssetEditor.prototype.showMessages = function(pType, pMessages) {
     var messages = [];
     for (var i = 0; i < pMessages.length; i++) {
       var message = new Message(pType, pMessages[i]);
       messages.push(message);
     }
     Notifications.notify(messages);
   };
-  
+
   return AssetEditor;
 
 });
--- //product/BCC/main/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/AssetViewNavigator.js
+++ /Users/buddha/work/oracle/jbuddha-ocp-main/BCC/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/AssetViewNavigator.js
@@ -35,78 +35,78 @@
      */
     this.assetViewIndex = ko.observable();
     /*
      * Indicates current tab panels
      */
     this.assetViewPanels = ko.observableArray();
     /*
      * Holds the current tab panel updates
      */
     this.updates = ko.observableArray();
-    /*
-     * Holds the current application Id
+    /**
+     * Holds the editor info like assetId, uid etc.,
      */
-    this.UID = null;
+    this.assetInfo = {};
     /*
      * Indicates current tab names
      */
     this.viewDisplayNames = [];
     /*
      * Indicates if any view panel is edited/changes
      */
     this.viewChange = ko.observable(false);
     /*
-     * Indicates array of panelInfo objects 
+     * Indicates array of panelInfo objects
      */
     this.panelInfos = ko.observableArray();
   };
-  
+
   /**
    * Add EventDispatcher functionality.
    */
   _.extend(AssetViewNavigator.prototype, EventDispatcher.prototype);
-  
+
   AssetViewNavigator.prototype.constructor = AssetViewNavigator;
   /**
    * The template for asset view navigator
    * @type {string}
    */
   AssetViewNavigator.prototype.template = sTemplateEngine.addSource(ASSET_VIEW_NAVIGATOR_TEMPLATE);
 
   /**
    * Initialize the asset view navigator with asset editor state information.
-   * @param UID
+   * @param assetInfo
    * @param pAssetEditorState
    */
-  AssetViewNavigator.prototype.init = function(pUID, pAssetEditorState) {
-    this.UID = pUID;
+  AssetViewNavigator.prototype.init = function(pAssetInfo, pAssetEditorState) {
+    this.assetInfo = pAssetInfo;
     this.viewDisplayNames = pAssetEditorState.viewDisplayNames;
     this.createPanelInfos(this.viewDisplayNames);
     this.assetViewIndex(pAssetEditorState.currentViewIndex);
     this.assetEditorState(pAssetEditorState);
     this.addAssetViewPanel(pAssetEditorState.currentViewIndex, pAssetEditorState.currentAssetView);
   };
 
   /**
    * Create the panel info objects with a specified index and add to the
    * panelInfo array.
    * @param pDisplayNames
    */
   AssetViewNavigator.prototype.createPanelInfos = function(pDisplayNames) {
     var panels = [];
     for ( var i = 0; i < pDisplayNames.length; i++) {
       var panelInfo = new PanelInfo(pDisplayNames[i], i);
       panels.push(panelInfo);
     }
     this.panelInfos = panels;
   };
-  
+
   /**
    * Create the asset view panel for the specified index and add to the array.
    * @param pCurrentViewIndex
    * @param pAssetViewState
    */
   AssetViewNavigator.prototype.addAssetViewPanel = function (pCurrentViewIndex, pAssetViewState) {
     if (!pAssetViewState) {
       return;
     }
     this.createAssetViewPanel(pAssetViewState, pCurrentViewIndex);
@@ -114,30 +114,30 @@
   };
 
   /**
    * Create the asset view panel for the specified index.
    * @param pAssetViewState
    * @returns viewPanel
    */
   AssetViewNavigator.prototype.createAssetViewPanel = function (pAssetViewState, pCurrentViewIndex) {
     var viewPanel = sUtils.createObject(pAssetViewState.viewClass);
     if (viewPanel) {
-      viewPanel.uid = this.UID;
+      viewPanel.assetInfo = this.assetInfo;
       viewPanel.init(pAssetViewState);
       viewPanel.on(EditorEvents.VIEW_CHANGE, this.onAssetViewChange, this);
-      this.assetViewPanels.push({ 
-        viewPanelIndex: pCurrentViewIndex, 
-        viewPanel: viewPanel 
+      this.assetViewPanels.push({
+        viewPanelIndex: pCurrentViewIndex,
+        viewPanel: viewPanel
       });
     }
   };
-  
+
   /**
    * Called when asset view panel is modified.
    */
   AssetViewNavigator.prototype.onAssetViewChange = function () {
     if (!this.viewChange()) {
       //iterate over panel to check if view change is already modified
       for (var i = 0; i < this.assetViewPanels().length; i++) {
         if (this.assetViewPanels()[i].viewPanel.modified) {
           this.viewChange(true);
           this.trigger(EditorEvents.ENABLE_BUTTON);
@@ -165,38 +165,38 @@
 
   /**
    * Called whenever a tab is clicked. Perform getAssetViewState call to the
    * server and returns the AssetViewState object.
    * @param pEvent
    * @param pData
    */
   AssetViewNavigator.prototype.onTabChange = function(pEvent, pData) {
     if (!(this.assetViewIndex() === pData.value)) {
       if (this.getAssetViewPanel(pData.value)) {
-        sGlobalSwitchboard.trigger(EditorController.EVENT_SET_ASSET_VIEW_INDEX, this.UID, pData.value);
+        sGlobalSwitchboard.trigger(EditorController.EVENT_SET_ASSET_VIEW_INDEX, this.assetInfo.uid, pData.value);
         this.assetViewIndex(pData.value);
       } else {
-        sGlobalSwitchboard.trigger(EditorController.EVENT_GET_ASSET_VIEW_STATE, this.UID, pData.value, this.loadAssetViewState.bind(this));
+        sGlobalSwitchboard.trigger(EditorController.EVENT_GET_ASSET_VIEW_STATE, this.assetInfo.uid, pData.value, this.loadAssetViewState.bind(this));
       }
     }
   };
 
   /**
    * Handler method for the getAssetViewState call, creates the asset view panel with
    * the updated AssetViewState object.
    * @param pAssetViewState asset editor view state object
    * @param pIndex
    */
   AssetViewNavigator.prototype.loadAssetViewState = function(pAssetViewState, pIndex) {
     this.addAssetViewPanel(pIndex, pAssetViewState);
   };
-  
+
   /**
    * Returns the current update of the asset
    * @returns updates
    */
   AssetViewNavigator.prototype.getUpdate = function() {
     // clear the updates 
     this.updates.removeAll();    
     // construct object representing the current update to this asset
     var assetPanelLength = this.assetViewPanels().length;
     for (var i=0; i < assetPanelLength; i++) {
--- //product/BCC/main/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/PropertyEditorAssetViewPanel.js
+++ /Users/buddha/work/oracle/jbuddha-ocp-main/BCC/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/PropertyEditorAssetViewPanel.js
@@ -1,65 +1,65 @@
 // Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
 define(function(require) {
   "use strict";
 
   var AssetViewPanel                = require("atg/assetmanager/editor/view/AssetViewPanel");
   var EditorEvents                  = require("atg/assetmanager/editor/view/EditorEvents");
   var PropertyEditorAssetViewUpdate = require("atg/assetmanager/editor/model/PropertyEditorAssetViewUpdate");
   var PropertyUpdate                = require("atg/assetmanager/editor/model/PropertyUpdate");
   var sTemplateEngine               = require("atg/core/TemplateEngine");
   var sUtils                        = require("atg/core/Utils");
-  
+
   var ko = require("knockout");
-  
+
   /**
    * @alias PropertyEditorAssetViewPanel
    * @classdesc An asset view panel that includes a collection of property editors
    * @author Jyothi Sunkara
    * @version $Id: //product/BCC/main/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/PropertyEditorAssetViewPanel.js#6 $$Change: 1243406 $
    * @constructor
    */
   var PropertyEditorAssetViewPanel = function () {
     AssetViewPanel.apply(this, arguments);
   };
 
   PropertyEditorAssetViewPanel.prototype = Object.create(AssetViewPanel.prototype);
-  
+
   /**
    * Add property editor for the given state object.
    * @param pPropertyState property state
    */
   PropertyEditorAssetViewPanel.prototype.addPropertyEditor = function (pPropertyState) {
     var viewClass = pPropertyState.descriptor.viewClass;
     if (!viewClass) {
       viewClass= "atg.assetmanager.editor.view.property.DefaultEditor";
     }
     var propertyEditor = sUtils.createObject(viewClass);
     if (propertyEditor) {
-      propertyEditor.uid = this.uid;
+      propertyEditor.assetInfo = this.assetInfo;
       propertyEditor.init(pPropertyState);
       propertyEditor.on(EditorEvents.PROPERTY_EDITOR_CHANGE, this.onPropertyEditorChange, this);
       return propertyEditor;
     }
     return null;
   };
 
   /**
    * called when any editor is modified
    */
   PropertyEditorAssetViewPanel.prototype.onPropertyEditorChange= function(){
     if(!this.modified){
       this.modified=true;
       this.trigger(EditorEvents.VIEW_CHANGE);
     }
   };
-  
+
   /**
    * Create an object describing the current updates to this panel
    * @returns update
    */
   PropertyEditorAssetViewPanel.prototype.doGetUpdate = function () {
     this.update = ko.observable();
     var updates = ko.observableArray();
     this.update(new PropertyEditorAssetViewUpdate());
     var categoryLength = this.propertyCategoryStates().length;
     for (var i = 0; i < categoryLength; i++) {
@@ -81,27 +81,27 @@
           updates.push(propertyUpdate);
         }
       }
     }
     this.update().propertyUpdates(updates);
     return this.update();
   };
 
   /**
    * checks if there are any errors of all the editors of the panel.
-   * @param pErrorState 
-   * @returns true or false 
+   * @param pErrorState
+   * @returns true or false
    */
   PropertyEditorAssetViewPanel.prototype.hasErrors = function(pErrorState) {
     var errorPropertyFound = false;
     for (var i = 0; i < this.propertyEditors.length; i++) {
       var propertyEditor = this.propertyEditors[i];
       if (propertyEditor.isErrorPresent(pErrorState)) {
         errorPropertyFound = true;
       }
     }
     return errorPropertyFound;
-  }  
-  
+  }
+
   return PropertyEditorAssetViewPanel;
 
 });
--- //product/BCC/main/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/property/.DS_Store
+++ /Users/buddha/work/oracle/jbuddha-ocp-main/BCC/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/property/.DS_Store
@@ -1,0 +1,2 @@
+   Bud1            �                                                           e c t i o n                                          
+ c o l l e c t i o ndsclbool                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  @      �                                        @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E   �                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       DSDB                                 `      �                                               @      �                                          @      �                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
--- //product/BCC/main/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/property/PropertyEditor.js
+++ /Users/buddha/work/oracle/jbuddha-ocp-main/BCC/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/property/PropertyEditor.js
@@ -1,30 +1,32 @@
 // Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
 define(function(require) {
   "use strict";
-  
+
   var EditorEvents    = require("atg/assetmanager/editor/view/EditorEvents");
   var EventDispatcher = require("atg/core/EventDispatcher");
   var PropertyUpdate  = require("atg/assetmanager/editor/model/PropertyUpdate");
   var sTemplateEngine = require("atg/core/TemplateEngine");
+  
   var sUtils          = require("atg/core/Utils");
   
+
   var ko = require("knockout");
   var _  = require("underscore");
   /**
    * @alias PropertyEditor
-   * @classdesc property editor 
+   * @classdesc property editor
    * @author Deepthi Kollipara
    * @version $Id: //product/BCC/main/src/j2ee-apps/ControlCenter.ear/ControlCenter.war/js/atg/assetmanager/editor/view/property/PropertyEditor.js#8 $$Change: 1247247 $
    * @constructor
    */
-  
+
   var PropertyEditor = function() {
     var self = this;
     /*
      * Holds he id of the current property Editor.
      * @type {observable<string>}
      */
     this.templateId = ko.observable();
     /*
      * Holds the label of the current property Editor.
      * @type {observable<string>}
@@ -49,133 +51,141 @@
      * Holds the Help text of the current property Editor.
      * @type {observable<string>}
      */
     this.helpText = ko.observable();
     /*
      * Indicates whether the current property is modified or not.
      * @type {observable<string>}
      */
     this.isModified = ko.observable(false);
     /*
-     * Holds whether the current property is mandatory or not. 
+     * Holds whether the current property is mandatory or not.
      * @type {observable<string>}
      */
     this.isRequired = ko.observable(false);
     /*
      * Indicates whether the current property is Disable mode or enable mode.
      * @type {observable<string>}
      */
     this.isDisabled = ko.observable(false);
     /*
      * Indicates whether the editor has Error or not.
      * @type {observable<string>}
      */
     this.hasError= ko.observable(false);
     /*
      * Indicates the error message
      */
     this.errorMessage= ko.observable();
     /*
+     * error validator for each property 
      * Indicates the custom error messages
      */
     this.customMessages = ko.observableArray();
     /*
      * Tracker for invalidComponentTracker attribute
      */
     this.componentTracker = ko.observable();
     /*
      * Custom validators for the editor
+     * error validator for each property
      */
     this.editorValidators = ko.observableArray();
     /**
-     * Holds the value for current editor's uid
-     * @type {string}
+     * Holds the values for current editor's information like uid, assetid etc
+     * @type {Object}
      */
-    this.uid = null;
+    this.assetInfo = {};
   }
-  
+
   /**
    * Add EventDispatcher functionality.
    */
   _.extend(PropertyEditor.prototype, EventDispatcher.prototype);
-  
+
   /**
    * Called whenever property Editor is loaded/reloaded
    * @param pPropertyState property state object.
    */
   PropertyEditor.prototype.init = function(pPropertyState) {
     var validators = null;
     this.state = pPropertyState;
     this.propertyValue(pPropertyState.value);
-    if (this.state.descriptor !== null || this.state.descriptor !== undefined) {   
+    if (this.state.descriptor !== null || this.state.descriptor !== undefined) {
       this.isRequired(this.state.descriptor.required);
       this.isDisabled(this.state.descriptor.readOnly);
       this.propertyName(pPropertyState.descriptor.propertyName);
       this.propertyType(pPropertyState.descriptor.type);
       validators = this.state.descriptor.attributes.propertyValidators;
     }
     this.determineValidators(validators);
     this.subscription = this.subscribe();
   };
-  
+
   /**
+   * Creates new Property Update Object with the latest value and invoked on save/update function. 
+   * @returns propertyUpdates property update object 
+   */ 
    * Creates the validators for the editor 
    * @param pValidators
    */ 
   PropertyEditor.prototype.determineValidators = function(pValidators) {
     if (!pValidators)
       return;
     var propertyValidators = pValidators.split(',');
     for ( var i = 0; i < propertyValidators.length; i++) {
       var propertyValidator = sUtils.createObject(propertyValidators[i], this.propertyName());
       if (propertyValidator) {
         this.editorValidators.push(propertyValidator.validator);
       }
     }
   }
   
   /**
    * Creates new Property Update Object with the latest value and invoked on save/update function. 
    * @returns propertyUpdates property update object 
    */ 
+   * Creates new Property Update Object with the latest value and invoked on save/update function.
+   * @returns propertyUpdates property update object
+   */
   PropertyEditor.prototype.getPropertyUpdate = function() {
     var propertyUpdates = new PropertyUpdate(this.propertyName(), this.propertyValue(), this.propertyType());
     return propertyUpdates;
   }
-  
+
   /**
    * Subscribe to the changes in editor
    */
   PropertyEditor.prototype.subscribe = function() {
     var self = this;
     var subscription = self.propertyValue.subscribe(function(pNewValue) {
       self.propertyValue(pNewValue);
       self.propertyChange(self);
     });
     return subscription;
   }
-  
+
   /**
    * Triggers an event when property editor is modified and set the modified flag to true.
    * @param pViewModel, pNewValue
    */
   PropertyEditor.prototype.propertyChange = function (pViewModel, pNewValue) {
     if (!this.isModified()) {
       this.isModified(true);
       this.trigger(EditorEvents.PROPERTY_EDITOR_CHANGE);
     }
   };
 
   /**
    * Checks if there any errors when the editor data is saved
    * @param pErrorState .
-   * @returns true or false 
+   * @returns true or false
    */
   PropertyEditor.prototype.isErrorPresent = function(pErrorState) {
     //pErrorState is undefined while checking client side validations
     if (!pErrorState) {
       // If there are any server side validation errors, 
       // don't validate client errors
       if( this.customMessages().length != 0){
         //remove the error's
         this.customMessages.removeAll();
         return false;
@@ -186,35 +196,35 @@
     } else if (pErrorState && pErrorState.specificMessages[this.state.descriptor.propertyName] != null) {
       this.hasError(true);
       this.errorMessage(pErrorState.specificMessages[this.state.descriptor.propertyName]);
       //set the custom messages with the server side error messages
       this.customMessages.push({'summary': oj.Translations.getResource("message_error"), 'detail': this.errorMessage()});
       return true;
     } else {
       return false;
     }
   }
-  
+
   /**
-   * Returns the constructor of ojComponent 
+   * Returns the constructor of ojComponent
    * @returns the constructor
    */
   PropertyEditor.prototype.getWidgetConstructor = function() {
     var widgetConstru